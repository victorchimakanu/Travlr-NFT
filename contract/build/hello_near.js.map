{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../src/contract.ts"],"sourcesContent":["export var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from '@scure/base';\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nfunction data_len(c) {\n    switch (c) {\n        case CurveType.ED25519:\n            return 32;\n        case CurveType.SECP256K1:\n            return 64;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction split_key_type_data(value) {\n    let idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [curveTypeFromStr(value.substring(0, idx)), value.substring(idx + 1)];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length) {\n        super(`Invalid length: ${length}`);\n        this.length = length;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\nexport class PublicKey {\n    constructor(data) {\n        this.data = data;\n        let curve_type = data.charCodeAt(0);\n        let curve_len = data_len(curve_type);\n        if (data.length != curve_len + 1) {\n            throw new InvalidLengthError(data.length);\n        }\n        this.data = data;\n    }\n    curveType() {\n        return this.data.charCodeAt(0);\n    }\n    static fromString(s) {\n        let [curve, key_data] = split_key_type_data(s);\n        let data;\n        try {\n            data = bytes(base58.decode(key_data));\n        }\n        catch (err) {\n            throw new Base58Error(err.message);\n        }\n        return new PublicKey(String.fromCharCode(curve) + data);\n    }\n}\n","import { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else {\n        throw Error(`Promise result ${status == PromiseResult.Failed ? \"Failed\" :\n            status == PromiseResult.NotReady ? \"NotReady\" : status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport function initialize({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function call({ privateFunction = false, payableFunction = false }) {\n    return function (target, key, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            if (privateFunction && near.predecessorAccountId() !== near.currentAccountId()) {\n                throw Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > BigInt(0)) {\n                throw Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function view({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function NearBindgen({ requireInit = false }) {\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(obj) {\n                near.storageWrite(\"STATE\", this._serialize(obj));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value) {\n                return JSON.stringify(value);\n            }\n            static _deserialize(value) {\n                return JSON.parse(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    if (classObject[item].constructor?.deserialize !== undefined) {\n                        classObject[item] = classObject[item].constructor.deserialize(plainObject[item]);\n                    }\n                    else {\n                        classObject[item] = plainObject[item];\n                    }\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import { NearBindgen, near, call, view, LookupMap, initialize, assert } from 'near-sdk-js';\n\n// when we mint a token we use this class \nclass Token{\n  token_id: any;\n  owner_id: string; \n\n  constructor(token_id: any, owner_id: string){\n\n    this.token_id = token_id;\n    this.owner_id = owner_id; // used for tracking \n\n  }\n}\n\n@NearBindgen({})\nclass TravlrNFT {\n  \n  owner_id: string;\n  owner_by_id: LookupMap;\n\n  constructor(){ \n    this.owner_id =\"\";\n    this.owner_by_id = new LookupMap(\"o\");\n  }\n  \n  @initialize({})\n  init({owner_by_id_prefix, owner_id}){\n\n    this.owner_by_id = new LookupMap(owner_by_id_prefix);\n    this.owner_id =  owner_id;\n\n  }\n  \n  @call({})\n  mint({token_id, token_owner_id}){\n\n    assert(near.predecessorAccountId() == this.owner_id, \"Unauthorized transaction\");  // checks to make sure its a valid transaction\n\n    assert (this.owner_by_id.get(token_id) === null, \"Token Id must be unique\");\n\n    this.owner_by_id.set(token_id, token_owner_id); //allows us to put a new entry into the map\n\n    return new Token(token_id, token_owner_id);\n\n  }\n\n  @view({})\n  get_token_by_id({token_id}){\n\n    let owner_of_token = this.owner_by_id.get(token_id);\n\n    if (owner_of_token == null ) {\n      return null; \n    }\n\n    return new Token (token_id, owner_of_token.toString());\n  }\n\n}"],"names":["PromiseResult","PromiseError","assert","b","str","Error","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","c","encode","Array","from","reverse","reduce","acc","i","undefined","decode","alphabet","digits","isArray","length","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","bytes","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","Object","keys","CurveType","U64_MAX","EVICTED_REGISTER","predecessorAccountId","env","predecessor_account_id","read_register","attachedDeposit","attached_deposit","storageRead","key","ret","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","storageWrite","value","exist","storage_write","storageRemove","storage_remove","initialize","target","descriptor","call","privateFunction","payableFunction","originalMethod","near","BigInt","view","NearBindgen","requireInit","_create","_getState","rawState","_deserialize","_saveToStorage","obj","_serialize","_getArgs","JSON","parse","stringify","_reconstruct","classObject","plainObject","item","constructor","deserialize","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","serialize","Token","token_id","owner_id","TravlrNFT","_dec","_dec2","_dec3","_dec4","_class","_class2","owner_by_id","init","owner_by_id_prefix","mint","token_owner_id","get_token_by_id","owner_of_token","toString","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","onReturn","value_return"],"mappings":"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"}